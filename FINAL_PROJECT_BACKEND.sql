SET SERVEROUTPUT ON;

SELECT R_BOOKID_SEQ.NEXTVAL FROM DUAL;
SELECT B_BOOKID_SEQ.NEXTVAL FROM DUAL;

-- USER PACKAGE STARTS HERE

CREATE OR REPLACE PACKAGE USERPACKAGE AS
    FUNCTION SEARCHBOOK(BOOK_ID NUMBER) RETURN VARCHAR2;
    PROCEDURE BORROWBOOK (BOOK_ID NUMBER, USER_ID NUMBER);
    PROCEDURE RETURNBOOK (BOOK_ID NUMBER, USER_ID NUMBER);
    PROCEDURE RESERVEBOOK (BOOK_ID NUMBER, USER_ID NUMBER);
END USERPACKAGE;

CREATE OR REPLACE PACKAGE BODY USERPACKAGE AS 
    FUNCTION SEARCHBOOK(BOOK_ID NUMBER) RETURN VARCHAR2 IS
        AVAILABLE NUMBER(2);
        BOOK_TITLE VARCHAR2(30);
        BOOK_LOCATION VARCHAR2(6);
    BEGIN
        -- Using an alias for better clarity
        SELECT BOOK_COUNT INTO AVAILABLE FROM LIBRARY_BOOKS LB WHERE LB.BOOK_ID = SEARCHBOOK.BOOK_ID;
        SELECT BOOK_NAME INTO BOOK_TITLE FROM LIBRARY_BOOKS LB WHERE LB.BOOK_ID = SEARCHBOOK.BOOK_ID;
        SELECT BOOK_LOC INTO BOOK_LOCATION FROM LIBRARY_BOOKS LB WHERE LB.BOOK_ID = SEARCHBOOK.BOOK_ID;
        
        IF AVAILABLE = 0 THEN
            RETURN 'Book ID not found.';
        ELSE
            RETURN AVAILABLE || ' copies of ' || BOOK_TITLE || ' is available at ' || BOOK_LOCATION;
        END IF;
    END SEARCHBOOK;
    
    PROCEDURE BORROWBOOK (BOOK_ID NUMBER, USER_ID NUMBER) IS 
        B_BOOK_SEQ NUMBER;
        BOOK_NAME VARCHAR2(30);
    BEGIN
        SELECT B_BOOKID_SEQ.CURRVAL INTO B_BOOK_SEQ FROM DUAL;
        SELECT BOOK_NAME INTO BOOK_NAME FROM LIBRARY_BOOKS WHERE LIBRARY_BOOKS.BOOK_ID = BORROWBOOK.BOOK_ID;
        
        UPDATE LIBRARY_BOOKS SET BOOK_COUNT = BOOK_COUNT - 1 WHERE LIBRARY_BOOKS.BOOK_ID = BORROWBOOK.BOOK_ID;
        UPDATE BORROWED_BOOKS SET BORROWER_ID = USER_ID WHERE B_BOOK_ID = (B_BOOK_SEQ + 1);
        
        DBMS_OUTPUT.PUT_LINE('You have successfully borrowed the book ' || BOOK_NAME || '. Your Borrowing Book ID is ' || (B_BOOK_SEQ + 1));
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Please check if either BOOK_ID or USER_ID are valid IDs. ' || SQLERRM);
    END BORROWBOOK;

    PROCEDURE RETURNBOOK (BOOK_ID NUMBER, USER_ID NUMBER) IS
        RECORD_COUNT NUMBER;
    BEGIN
        SELECT COUNT(*) INTO RECORD_COUNT FROM BORROWED_BOOKS WHERE BORROWED_BOOKS.BOOK_ID = RETURNBOOK.BOOK_ID AND BORROWED_BOOKS.BORROWER_ID = RETURNBOOK.USER_ID;
        
        IF RECORD_COUNT != 0 THEN
            UPDATE LIBRARY_BOOKS SET BOOK_COUNT = BOOK_COUNT + 1 WHERE LIBRARY_BOOKS.BOOK_ID = BORROWED_BOOKS.BOOK_ID;
            DELETE FROM BORROWED_BOOKS WHERE BORROWED_BOOKS.BOOK_ID = BOOK_ID AND BORROWED_BOOKS.BORROWER_ID = USER_ID;
        ELSE 
            DBMS_OUTPUT.PUT_LINE('No record of a user borrowing the book you have entered.');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Please check if either BOOK_ID or USER_ID are valid IDs');
    END RETURNBOOK;

    PROCEDURE RESERVEBOOK (BOOK_ID NUMBER, USER_ID NUMBER) IS
        R_BOOK_SEQ NUMBER;
        BOOK_NAME VARCHAR2(30);
    BEGIN
        SELECT R_BOOKID_SEQ.CURRVAL INTO R_BOOK_SEQ FROM DUAL;
        SELECT BOOK_NAME INTO BOOK_NAME FROM LIBRARY_BOOKS WHERE LIBRARY_BOOKS.BOOK_ID = RESERVEBOOK.BOOK_ID;

        UPDATE LIBRARY_BOOKS SET RESERVED = 'TRUE' WHERE LIBRARY_BOOKS.BOOK_ID = RESERVEBOOK.BOOK_ID;
        UPDATE RESERVED_BOOKS SET BORROWER_ID = USER_ID WHERE R_BOOK_ID = (R_BOOK_SEQ + 1);
        
        DBMS_OUTPUT.PUT_LINE('You have successfully reserved the book ' || BOOK_NAME || '. Your Reserving Book ID is ' || (R_BOOK_SEQ + 1));
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Please check if either BOOK_ID or USER_ID are valid IDs. ' || SQLERRM);
    END RESERVEBOOK;
    
END USERPACKAGE;

-- TRIGGER FOR BORROWING BOOKS
CREATE OR REPLACE TRIGGER BORROW_BOOK_TRIGGER BEFORE UPDATE OF BOOK_COUNT ON LIBRARY_BOOKS 
FOR EACH ROW WHEN (NEW.BOOK_COUNT < OLD.BOOK_COUNT)
    DECLARE
        BOOK_ID NUMBER(6);
        BOOK_NAME VARCHAR2(30);
    BEGIN
        BOOK_ID := :NEW.BOOK_ID;
        BOOK_NAME := :NEW.BOOK_NAME;
        
        INSERT INTO BORROWED_BOOKS (BOOK_ID, BOOK_NAME) VALUES (BOOK_ID, BOOK_NAME);
END;
/

-- TRIGGER FOR RESERVING BOOKS
CREATE OR REPLACE TRIGGER RESERVE_BOOK_TRIGGER BEFORE UPDATE OF RESERVED ON LIBRARY_BOOKS 
FOR EACH ROW WHEN (NEW.RESERVED = 'TRUE')
    DECLARE
        -- Declare variables to store relevant information
        BOOK_ID NUMBER(6);
        BOOK_NAME VARCHAR2(30);
    BEGIN
        -- Retrieve user and book details from the updated row
        BOOK_ID := :NEW.BOOK_ID;
        BOOK_NAME := :NEW.BOOK_NAME;
        
        -- Insert a record into BORROWED_BOOKS table
        INSERT INTO RESERVED_BOOKS (BOOK_ID, BOOK_NAME) VALUES (BOOK_ID, BOOK_NAME);
END;
/

-- SEARCH BOOK
DECLARE
    IS_AVAILABLE VARCHAR2(50);
BEGIN
    IS_AVAILABLE := USERPACKAGE.SEARCHBOOK(1007);
    DBMS_OUTPUT.PUT_LINE(IS_AVAILABLE);
END;

-- BORROW BOOK
BEGIN
    USERPACKAGE.BORROWBOOK(1005, 3);
END;

-- RESERVE BOOK
BEGIN
    USERPACKAGE.RESERVEBOOK(1007, 5);
END;

-- USER PACKAGE ENDS HERE


-- STAFF PACKAGE STARTS HERE

CREATE OR REPLACE PACKAGE STAFFPACKAGE AS
    PROCEDURE ADDBOOK(TITLE VARCHAR2, LOCATION VARCHAR2, COUNT NUMBER);
    PROCEDURE DELETEBOOK(BOOK_ID NUMBER, COUNT NUMBER);
END STAFFPACKAGE;
/
    PROCEDURE GENERATEREPORT(REPORT_TYPE VARCHAR2);
    PROCEDURE NOTIFYUSER(BOOK_ID NUMBER);

CREATE OR REPLACE PACKAGE BODY STAFFPACKAGE AS
    PROCEDURE ADDBOOK(TITLE VARCHAR2, LOCATION VARCHAR2, COUNT NUMBER) IS
        v_book_id LIBRARY_BOOKS.BOOK_ID%TYPE;
        v_existing_count LIBRARY_BOOKS.BOOK_COUNT%TYPE;

    BEGIN
        -- Check if the book already exists
        SELECT BOOK_ID, BOOK_COUNT
        INTO v_book_id, v_existing_count
        FROM LIBRARY_BOOKS
        WHERE BOOK_NAME = TITLE AND BOOK_LOC = LOCATION;

        -- Book exists, update the count
        UPDATE LIBRARY_BOOKS
        SET BOOK_COUNT = v_existing_count + COUNT
        WHERE BOOK_ID = v_book_id;

        -- Book doesn't exist, insert a new record
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                INSERT INTO LIBRARY_BOOKS (BOOK_NAME, BOOK_LOC, BOOK_COUNT)
                VALUES (TITLE, LOCATION, COUNT);
    END ADDBOOK;
    
    PROCEDURE DELETEBOOK(BOOK_ID NUMBER, COUNT NUMBER) IS
        v_existing_count LIBRARY_BOOKS.BOOK_COUNT%TYPE;

    BEGIN
        -- Retrieve the existing count for the book
        SELECT BOOK_COUNT
        INTO v_existing_count
        FROM LIBRARY_BOOKS
        WHERE BOOK_ID = BOOK_ID;

        -- Check if the count to delete is greater than the existing count
        IF COUNT > v_existing_count THEN
            DBMS_OUTPUT.PUT_LINE('Error: Cannot delete more copies than available.');
        ELSE
            -- Update the count
            UPDATE LIBRARY_BOOKS
            SET BOOK_COUNT = v_existing_count - COUNT
            WHERE BOOK_ID = BOOK_ID;
        END IF;
    END DELETEBOOK;
    
    PROCEDURE GENERATEREPORT(REPORT_TYPE VARCHAR2) IS
    BEGIN
        -- Generate report based on the specified type
        IF REPORT_TYPE = 'Books borrowed' THEN
            FOR rec IN (SELECT * FROM BORROWED_BOOKS) LOOP
                DBMS_OUTPUT.PUT_LINE('Book ID: ' || rec.BOOK_ID || ', User ID: ' || rec.USER_ID || ', Borrow Date: ' || rec.BORROW_DATE);
            END LOOP;
        ELSIF REPORT_TYPE = 'Books reserved' THEN
            FOR rec IN (SELECT * FROM RESERVED_BOOKS) LOOP
                DBMS_OUTPUT.PUT_LINE('Book ID: ' || rec.BOOK_ID || ', User ID: ' || rec.USER_ID || ', Reserve Date: ' || rec.RESERVE_DATE);
            END LOOP;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error: Invalid report type.');
        END IF;
    END GENERATEREPORT;
    
END STAFFPACKAGE;
/





